{
  "mundane": "lacking interest or excitement; dull; monotonous; repetitive",
  "tedious": "boring",
  "zillion": "a very large indefinite number (mostly used in exaggeration)",
  "might": "used tentatively to ask permission or to express a polite request.; past of may",
  "worth all the effort": "If you say that something is worth the effort, you mean that it will justify the energy that you have spent or will spend on it",
  "auxilary code": "This code typically includes utilities, helper functions, configuration files, and any other components that are used to support, enhance, or facilitate the primary features of the software",
  "typical": "",
  "holds up": "",
  "expeditious": "having or showing the ability to respond without delay or hesitation; expedite",
  "facilitate": "make something easier for someone; accelerate",
  "Domain Events": "Trigger workflows that crosses consistency boundaries",
  "Message Bus": "Provides a unified way of invoking usecases from any endpoint",
  "CQRS": "Command Query Responsibility Segregation; Separating reads and writes avoids awkward compromises in an EDA and enables performance and scalability",
  "ad hoc": "created or done for a particular purpose as necessary.\n \n eg. The team made some ad hoc changes to the project plan to accommodate the new requirements.",
  "Descriptors": "A descriptor is a Python object that implements a method of the descriptor protocol.\n \n The descriptor protocol consists of three methods. If an object defines any of these methods, it is considered a descriptor.",
  "Types of Descriptors": "Data Descriptors, Non-Data Descriptors, and Read-Only Descriptors",
  "Data Descriptors": "If an object defines __set__() or __delete__(), it is considered a data descriptor ",
  "Non-Data Descriptors": "A descriptor that defines only __get__ (they are often used for methods but other uses are possible).",
  "Read-Only Descriptors": "To make a read-only data descriptor, define both __get__() and __set__() with the __set__() raising an AttributeError when called.",
  "Descriptor Protocol": "The descriptor protocol consists of three methods: __get__, __set__, and __delete__",
  "__get__ signature": "def __get__(self, instance --> passed when method is called on Instance, owner --> passed when method is called on Class)",
  "__set__ signature": "def __set__(self, instance , value)",
  "__delete__ signature": "def __delete__(self, instance)",
  "__set_name__": "A method that is called when the descriptor is assigned to a class attribute",
  "Examples of Descriptors": "Properties, Class Methods, Static Methods, Instance Methods, ORM fields",
  "Properties": "A property is a built-in descriptor that allows you to define custom behavior for attribute access",
  "Class Methods": "A class method is a built-in descriptor that allows you to define methods that operate on the class itself rather than instances of the class",
  "Static Methods": "A static method is a built-in descriptor that allows you to define methods that don't operate on instances of the class or the class itself",
  "Instance Methods": "An instance method is a built-in descriptor that allows you to define methods that operate on instances of the class",
  "Decorator": "A decorator is a function that takes another function and extends or modifies its behavior",
  "Class methods vs Static methods": "Class methods take a cls parameter that points to the class itself, while static methods don't take any special parameters.\n \n Class methods can access and modify class state, while static methods can't access or modify class state.\n \n Class methods are often used to define alternative constructors, while static methods are often used to define utility functions that don't operate on instances of the class or the class itself.",
  "Function vs methods in python": "Functions stored in class dictionaries get turned into methods when invoked.\n \n Methods only differ from regular functions in that the object instance is prepended to the other arguments. This is done by the descriptor protocol.\n \n To support automatic creation of methods, functions include the __get__() method for binding methods during attribute access",
  "workflow orchestration": "Workflow orchestration is the process of automating, executing, and monitoring complex workflows that involve multiple tasks or services.",
  "TYPE_CHECKING": "A special constant that is assumed to be True by 3rd party static type checkers. It is False at runtime. \n It avoids circular imports. \n meaning that you can make some imports for type annotation reasons only trigger for a type checker is running/looking at the code while avoiding circular imports and still getting type annotation benefits",
  "GNU": "GNU is a Unix-like operating system. That means it is a collection of many programs: applications, libraries, developer tools, even games.",
  "Canonical": "A 'unique' standard or normal form of something.",
  "as a matter of fact": "You use as a matter of fact to introduce a statement that gives more details about what has just been said, or an explanation of it, \nor something that contrasts with it"
}
